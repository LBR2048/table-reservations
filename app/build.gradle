apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'

android {
    compileSdkVersion 28
    defaultConfig {
        applicationId "com.example.leonardo.waiterapp"
        minSdkVersion 21
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    testOptions {
        unitTests.returnDefaultValues = true
    }
    sourceSets {
        // https://blog.danlew.net/2015/11/02/sharing-code-between-unit-tests-and-instrumentation-tests-on-android/
        String sharedTestDir = 'src/sharedTest/java'
        test {
            java.srcDir sharedTestDir
        }
        androidTest {
            java.srcDir sharedTestDir
        }
    }
}

ext {
    dependencies {
        implementation fileTree(dir: 'libs', include: ['*.jar'])
        implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
        implementation 'androidx.appcompat:appcompat:1.0.0'
        implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
        implementation 'androidx.legacy:legacy-support-v4:1.0.0'
        implementation 'androidx.recyclerview:recyclerview:1.0.0'

        // LiveData and ViewModel
        def lifecycle_version = "2.0.0"
        implementation "androidx.lifecycle:lifecycle-extensions:$lifecycle_version"
        kapt "androidx.lifecycle:lifecycle-compiler:$lifecycle_version"
        testImplementation "androidx.arch.core:core-testing:$lifecycle_version"
        androidTestImplementation "androidx.arch.core:core-testing:$lifecycle_version"

        // Room
        def room_version = "2.1.0-alpha02"
        implementation "androidx.room:room-runtime:$room_version"
        kapt "androidx.room:room-compiler:$room_version"
        testImplementation "androidx.room:room-testing:$room_version"

        // WorkManager
        def work_version = "1.0.0-alpha10"
        implementation "android.arch.work:work-runtime-ktx:$work_version" // use -ktx for Kotlin

        // Retrofit
        def retrofit_version = '2.4.0'
        implementation "com.squareup.retrofit2:retrofit:$retrofit_version"
        implementation "com.squareup.retrofit2:retrofit-mock:$retrofit_version"
        implementation "com.squareup.retrofit2:converter-gson:$retrofit_version"

        // Stetho
        implementation 'com.facebook.stetho:stetho:1.5.0'

        // Testing
        testImplementation 'junit:junit:4.12'
        androidTestImplementation 'androidx.test:runner:1.1.0'
        androidTestImplementation 'androidx.test:rules:1.1.0'
        androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.0'
        androidTestImplementation 'androidx.test.uiautomator:uiautomator:2.2.0'
        androidTestImplementation 'androidx.test.espresso:espresso-contrib:3.1.0'

        // Mockito
        def mockito_version = "2.22.0"
        testImplementation "org.mockito:mockito-inline:$mockito_version"
        androidTestImplementation ("org.mockito:mockito-android:$mockito_version") {
            exclude group: 'net.bytebuddy'
        }
    }
}

